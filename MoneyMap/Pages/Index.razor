@page "/"
@using MoneyMap.Data
@inject Cash_Flow_Service CFS

<NavLink class="nav-link" href="Cash_Flow_Add">
    <span class="oi oi-plus" aria-hidden="true"></span> Add Transaction
</NavLink>
@if(Categories is null || cFlow is null)
{
    <p><em>Loading..</em></p>
}
else
{   
    <div class="row">
        <div class = "col-md-4">
            <div class="form-group">
            <label clas="control-label">Category</label>
            <select @bind="catProperty" class=" form-control ">

                <option value="All">All</option>
                @foreach (var c in Categories)
                {
                    <option value="@c"> @c  </option>
                }

            </select>
            </div>
            <div class="form-group">
            <label clas="control-label">Month</label>
            <select @bind="monthProperty" class=" form-control ">

                <option value="0">All</option>
                @foreach (var m in Months)
                {
                    <option value="@m"> @m </option>
                }

            </select>
            </div>
        </div>
    </div>
    <MoneyCard value=@cFlow.Sum(c=>c.movement) title="Savings" text="Your total saving"/>
    <div class="row">
        <div class="col-md-4">
            <FlowTable cash_flows="@cFlow"/>
        </div>
        <div class="col-md-4">
            <FlowByCategoryTable cash_flows="@cFlow"/>
        </div>

    </div>
}

@code{

    private List<Cash_Flow> tableCashFlow{get; set;}
    public List<Cash_Flow> cFlow {get;set;}
    public HashSet<String> Categories{get; set;} = new();
    public HashSet<int> Months{get; set;} = new();
    
    private int month{get;set;} = 0;
    public int monthProperty{
        get{
            return month;
        }
        set{
            month = value;
            ApplyFilters();
        }
    }
    private string category{get; set;} = "All";
    public string catProperty{
        get{
            return category;
        }
        set{
            category = value;
            ApplyFilters();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        tableCashFlow = await Task.Run(() => CFS.GetCashFlow());
        cFlow = tableCashFlow;
        foreach(Cash_Flow c in cFlow){
            Categories.Add(c.description);
            Months.Add(c.movement_date.Month);
        }

    }

    public void ApplyFilters(){
        cFlow = tableCashFlow;
        if(category != "All")
            @* cFlow = CFS.GetFilteredCashFlow(category); *@
            cFlow = cFlow.FindAll(c => c.description.Equals(catProperty));

        if(monthProperty != 0)
                cFlow = cFlow.FindAll(c=>c.movement_date.Month==monthProperty);

    }

}