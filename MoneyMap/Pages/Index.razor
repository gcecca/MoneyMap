@page "/"
@using MoneyMap.Data
@using MudBlazor
@inject Cash_Flow_Service CFS


@if(!initialized)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>      

}
else
{   
    <div class="row">
        <div class="col-md-2">
            <div class="form-group">
                <MudSelect T="string" Label="Category" @bind-Value=@catProperty>
                    <MudSelectItem Value="@("All")" />
                        @foreach (var c in Categories)
                    {
                        <MudSelectItem Value="@c" />
                    }
                </MudSelect>

            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <MudSelect T="int" Label="Month" @bind-Value=@monthProperty>
                    <MudSelectItem Value="0" > All </MudSelectItem>
                        @foreach (var m in Months)
                        {
                        <MudSelectItem Value="@m" />
                        }
                </MudSelect>

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            <MoneyCard value=@cFlow.FindAll(c => c.movement > 0).Sum(c => c.movement) title="Income" text ="Total Income" />
        </div>
        <div class="col-md-2">
            <MoneyCard value=@cFlow.FindAll(c => c.movement < 0).Sum(c => c.movement) title="Expenses" text ="Total Expenses" />
        </div>
        <div class="col-md-2">
            <MoneyCard value=@cFlow.Sum(c=>c.movement) title="Savings" text="Your total savings" />
        </div>
    </div>
    <div class="row">

        <div class="col-md-6">
            <FlowTable cash_flows="@cFlow"/>
        </div>
        <div class="col-md-4">
            <FlowByCategoryTable cash_flows="@cFlow"/>
        </div>
    </div>
}

@code{

    private List<Cash_Flow> tableCashFlow{get; set;}
    public List<Cash_Flow> cFlow {get;set;}
    public HashSet<String> Categories = new();
    public HashSet<int> Months = new();
    public Dictionary<string, double> inMap = new();
    public bool initialized { get; set; } = false;


    private int month{get;set;} = 0;
    public int monthProperty{
        get{
            return month;
        }
        set{
            month = value;
            ApplyFilters();
        }
    }
    private string category{get; set;} = "All";
    public string catProperty{
        get{
            return category;
        }
        set{
            category = value;
            ApplyFilters();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        tableCashFlow = await Task.Run(() => CFS.GetCashFlow());
        cFlow = tableCashFlow;
        foreach(Cash_Flow c in cFlow){
            Categories.Add(c.description);
            Months.Add(c.movement_date.Month);
            if (c.movement > 0) {
                if(!inMap.ContainsKey(c.description))
                    inMap.Add(c.description, Convert.ToDouble(c.movement));
                else
                    inMap[c.description] += c.movement;
            }
        }
        initialized = true;

    }

    public void ApplyFilters(){
        cFlow = tableCashFlow;
        if(category != "All")
            
            cFlow = cFlow.FindAll(c => c.description.Equals(catProperty));

        if(monthProperty != 0)
                cFlow = cFlow.FindAll(c => c.movement_date.Month == monthProperty);

    }
}